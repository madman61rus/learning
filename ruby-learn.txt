----Комментарии

# - однострочный комментарий

Многострочный комментарий

=begin
....
=end

----Имена переменных

Обычно имена переменных начинаются с буквы или спец. модификатора

- локальные переменные со строчной буквы или _
- глобальные с $
- переменные экземпляра с @
- переменные класса с @@
- константы с заглавной 

----Константы,переменные и типы

В Ruby переменные не имеют типа, а объекты, на которые переменные ссылаются
имеют

Переменные в двойных кавычках интерполируются.


----Операторы ветвления

	if выражение then
		....
	else
		....
	end




	unless выражение then
		....
	else
		....
	end


Так же проверку можно ставить в конце выражения

	operation if y == 3
	operation unless y != 3

	x = if a>0 then b else c end
	x = unless a<0 then c else b end



Оператор case


	case "Один"
		when "Два"
			....
		when "Три"
			....
		when "Один"
			....
		else
			....
	end

	else вырабатывается если ни одна из проверок не прошла

Если проверяемое значение число, то его можно сравнивать с диапазоном,
для проверки входит оно в него или нет


----Циклы

	Цикл while

	while выражение do
		......
		......
	end


	begin
		.....
		.....
	end while выражение


	Цикл unless

	until выражение do
		......
		......
	end


	begin
		.....
		.....
	end unless выражение


	Цикл for

	for x in список do
		.....
		.....
	end


	Итератор each

	список.each do |x|
		.....
		.....
	end


	Метод loop

		loop do
			.....
			.....
			break if i < n
		end

		loop do
			.....
			.....
			break unless i > n
		end


	Итератор times

		10.times do |x|
			.....
			.....
		end


	Итератор upto

		0.upto(10) do |i|
			.....
			.....
		end


	Итератор each_index

		list.each_index do |x|
			....
			....
		end


----Исключения

	Метод raise возбуждает исключение

	raise "Произошла ошибка"
	raise ArgumentError

	Обработка исключений производится в блоке begin end

		begin
			....
			....
		rescue ArgumentError
			....
			....
		rescue ZeroDivisionError
			....
			....
		end

	или

		begin
			....
			....
		rescue => err
			....
		end

	В переменную err передается объект-исключение.Так как тип ошибки не определен,
	то перехватываться будут все ошибки класса StandartError

	Так же может присутствовать блок else, который будет вызван если не совпал ни
	один из обработчиков

	Если необходимо попытаться еще раз выполнить блок, то можно использовать оператор
	retry

		begin
			....
			....
		rescue
			....
			retry
		end

	Чтобы выполнить операции в любом случае, можно добавить блок ensure. Который 
	выполнится в любом случае, было исключение или нет

	Rescue может быть модификатором

		x = a/b rescue puts("Деление на ноль!")

	Тело определения метода является неявным определением блока, поэтому begin и end
	могут быть опущены

		def method
			.....
			.....
		rescue
			.....
		end


----Классы

	Определение класса

	class Friend
		@@mybame = "Bob" # переменная класса

		def initialize(name,sex,phone)
			@name,@sex,@phone = name,sex,phone # переменные экземпляра
		end

		def hello
			puts "Hi, my name is #{@name}"
		end

		def Friend.out_common_friend # метод класса
			puts "All we are friends"
		end
	end



	Чтобы задать геттеры и сеттеры для свойств класса, можно использовать методы
	attr,attr_accessor,attr_reader,attr_writer


	Для управления видимостью используются модификаторы private, protected, public.
	(Переменные экземпляра всегда закрыты, обращаться к ним можно только через 
	геттеры и сеттеры). Модификатор принимает в качестве параметра символ, например 
	:foo, а если он опущен. то его действие распространяется на все следующие
	объявления

		public :method_one

	public - доступный всем
	private - доступен в классе, его потомкам и может вызываться от имени self
	protected - метод может вызываться только в нутри класса, но не обязательно
				через self

	По умолчанию все методы открыты, кроме initialize


	Класс может наследоваться от другого класса

		class MyClass < OtherClass
			....
			....
		end


	Чтобы обратиться к методу родительского класса, то нужно использовать
	super

	В классе можно определять синонимы методов с помощью alias_method

		alias_method :newname :oldname


----Методы и атрибуты

	Методы могут принимать переменное кол-во аргументов

		receiver.methon(arg1, *more_args)

	аргументы со звездочкой в конце аргументов, может свернуть переданные аргументы

		def mymethod(a, b, *c)
			...
			...
		end

		....
		mymethod(1,2,3,4,5,6,7,8,9)

	аргументы могут быть именованными

		def mymethod(name: "default", options: [])
			....
		end

	если у именованного параметра отсутствует значение по-умолчанию, то
	считается что он обязателен

		def mymethod(name:, age:)
			...
		end


	Можно объявлять методы на уровне объектов, а не класса и этот метод будет принадлежать
	одному-единственному объекту, не затрагивая ни класс, ни суперкласс

		str = "Hello"

		def str.spell
			self.split(/./).join("-")
		end

		str.spell # H-e-l-l-o

	













