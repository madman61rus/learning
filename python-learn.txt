                          Базовые типы

Числа

    Операции над числами
    +   плюс
    -   минус
    *   умножение
    /   деление с плавающей точкой
    //  целочисленное деление
    %   остаток от деления  ( divmod() - возвращает кортеж, частное и остаток)
    **  возведение в степень

    0b 0B двоичная
    0o 0O восьмеричная
    0x 0X шестнадцатиричная

Целый тип (int)

    Начиная с 3, тип long отсутствует, а int может быть любого размера, даже
    больше 64 бит

Числа с плавающей точкой (float)



    Преобразование типов

        int(True)   - 1
        int(False)  - 0

        int(89.34)  - 89
        int(1.0e4)  - 1000

        int('99')   - 99
        int('-23')  - 23

        float(True) - 1.0
        float(False)- 0.0

        float(98)   - 98.0
        float('99') - 99.0


Строки

    Строки являются неизменяемыми.

        'Snap'
        "Crackle"
        ''' Многострочная
          строка '''

    Конкатенация происходит с помощью +

        "Hello" + 'world'  - "Hello world"

    Оператор * размножает строку нужное количество раз

        'H' * 6  - 'HHHHHH'

    Извлечь нужный символ из строки можно с помощью []

        a = 'Hello'
        a[0]          - H
        a[-1]         - o

    Извлечь подстроку из строки можно с помощью

        [start:end:step]  - от start до end, с шагом step
        [:]               - все, от начала, до конца
        [start:]          - от start до конца
        [:end]            - от начала до end-1
        [start:end]       - от start до end-1

        если шаг отрицательный, то движение будет от конца к началу

        Для вычисления длины строки есть функция len

          len("empty")

        Для разбиения строки на список, по разделителю, можно использовать функцию
        split()

          "hello, my, friend".split(",") -> ["hello","my","friend"]

        Для объединения элементов списка в строку, используется функция
        join

          "разделитель".join(список)

          ",".join(['one','two','three']) -> "one,two,three"

        Некоторые функции для работы со строками

          len(строка) - кол-во символов в строке
          строка.startswith(образец) - начинается ли строка с образца ?
          строка.endswith(образец) - заканчивается ли строка образцом ?
          строка.find(образец) - поиск первого вхождения образца в строке
          строка.rfind(образец) - поиск последнего вхождения образца
          строка.count(образец) - сколько раз встречается образец в строке
          строка.isalnum() - являются ли все символы строки цифрами ?
          строка.strip('.') - удаление . с обоих концов
          строка.capitalize() - Первое слово с большой буквы
          строка.title() - Все слова с большой буквы
          строка.upper() - Все символы в верхний регистр
          строка.lower() - Все символы в нижний регистр
          строка.swapcase() - Сменить регистр букв
          строка.center(30) - Отцентрировать строку на 30 пробелов
          строка.
          строка







    Преобразование к строке

        str(96.5)  - '96.5'
        str(1.0e4) - '10000.0'



Списки

  Упорядоченный набор элементов разного типа. Обозначается []

      elements = [10, 'a' , "bbb" , [1,2,3] , 5]

  Изменение элемента списка происходит по его индексу

  Добавление элементов :

      Добавление в конец списка:

          elements.append(23)

      Вставка по индексу. Элементы справа сдвигаются на одну позицию :

          elements.insert(0,'bbb')

  Длина списка:

      Узнать длину списка можно с помощью функции len():

          len(elements)

  Удаление элементов :

      Удаление по индексу:

          del elements[0]

      Удаление последнего элемента методом pop, что позволяет работать
      с удаляемым значением:

          elem = elements.pop()

      Удаление элемента из определенной позиции

          elem = elements.pop(1)

      Удаление элементов по значению. Удаляется только первое найденное вхождение:

          elements.remove('bbb')

  Упорядочивание списков :

      Метод sort() упорядочивает по алфавиту !!! изменяя список:

          elements.sort()

      В обратном порядке:

          elements.sort(reverse=True)

      Метод sorted() упорядочивает по алфавиту, но не изменяя список:

          sorted_elements = sorted(elements)

      Метод reverse() разворачивает список !!! изменяя список:

          elements.reverse()




Словари
Кортежи
Файлы
Множества
Прочие базовые типы
Типы структурных элементов программ

                                Циклы

Цикл for

  Цикл перебора в множестве:

      elements = [1,2,3,4,5,6,7,8,9]
      for elem in elements:
          print(elem)


                                        Списки

Создание списка

  Функция range(начало,смещение,шаг) создает числовую последовательность:

      range(1,5) #создает последовательность 1,2,3,4


Создание числового списка

  Чтобы создать числовой список с помощью range(), можно воспользоваться функцией list()

      list(range(1,5)) # [1,2,3,4]

Генератор списка

      squares = [value**2 for value in range(1,11)]


Срезы

  Чтобы создать срез списка, необходимо задать индексы первого и последнего элемента

      elements[0:3]

Копирование списка

  Скопировать список можно с помощью среза

      new_elements = elements[:]

  Если применить просто равенство, то создастся ссылка на старый список

  Проверить входит ли значение в список можно с помощью выражения in :

      'mushrooms' in request

Проверить отсутствие значения в списке можно с помощью выражения not in :

      'mushrooms' not in request


                                              Кортежи

Кортеж - неизменяемый список элементов.

    Определение кортежа:

        dimensions = (200,30)
        dimensions[0]         # 200

    Перебор значений в кортеже:

        for dimension in dementions:
            print(dimension)

Значение в кортеже изменить нельзя, но можно присвоить переменной другой кортеж:

        dimensions = (200,30)
        dimentions = (150,20)



                                Операторы выбора

Оператор if:

    if условие:
      .....
    else:
      .....

или

     if условие:
       ......
     elif условие:
       ......
     else:
       ......



                                Словари

Словари - это множества, состоящие из пары ключ-значение

    alien = {'color':'green', 'points': 10}

Получить значение можно по ключу

    alien['color']  # green

Добавить пару можно :

    alien['screem'] = 'eeeeeeeep'

Создание пустого словаря

    alien = {}

Изменение значения :

    alien['color'] = 'red'

Удаление пары :

    del alien['color']

Перебор словаря

    Перебор пар ключ-значение:

        for key,value in user.items():
          ......

    Перебор всех ключей:

        for key in user.keys():
          .....

        Так как по умолчанию словарь выдает список ключей, то это же
        можно написать как :

        for key in user:
          .....
