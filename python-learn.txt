                          Базовые типы

Комментарии

    # - однострочный

Перенос выражения на следующую строку

    \ в конце строки

Числа

    Операции над числами
    +   плюс
    -   минус
    *   умножение
    /   деление с плавающей точкой
    //  целочисленное деление
    %   остаток от деления  ( divmod() - возвращает кортеж, частное и остаток)
    **  возведение в степень

    0b 0B двоичная
    0o 0O восьмеричная
    0x 0X шестнадцатиричная

Целый тип (int)

    Начиная с 3, тип long отсутствует, а int может быть любого размера, даже
    больше 64 бит

Числа с плавающей точкой (float)

    float("inf") выдает самое большое число float, которое можно использовать
    в сравнениях для нахождения максимума или минимума


    Преобразование типов

        int(True)   - 1
        int(False)  - 0

        int(89.34)  - 89
        int(1.0e4)  - 1000

        int('99')   - 99
        int('-23')  - 23

        float(True) - 1.0
        float(False)- 0.0

        float(98)   - 98.0
        float('99') - 99.0


Строки

    Строки являются неизменяемыми.

        'Snap'
        "Crackle"
        ''' Многострочная
          строка '''

    Конкатенация происходит с помощью +

        "Hello" + 'world'  - "Hello world"

    Оператор * размножает строку нужное количество раз

        'H' * 6  - 'HHHHHH'

    Извлечь нужный символ из строки можно с помощью []

        a = 'Hello'
        a[0]          - H
        a[-1]         - o

    Извлечь подстроку из строки можно с помощью

        [start:end:step]  - от start до end, с шагом step
        [:]               - все, от начала, до конца
        [start:]          - от start до конца
        [:end]            - от начала до end-1
        [start:end]       - от start до end-1

        если шаг отрицательный, то движение будет от конца к началу

        Для вычисления длины строки есть функция len

          len("empty")

        Для разбиения строки на список, по разделителю, можно использовать функцию
        split()

          "hello, my, friend".split(",") -> ["hello","my","friend"]

        Для объединения элементов списка в строку, используется функция
        join

          "разделитель".join(список)

          ",".join(['one','two','three']) -> "one,two,three"

        Некоторые функции для работы со строками

          len(строка) - кол-во символов в строке
          строка.startswith(образец) - начинается ли строка с образца ?
          строка.endswith(образец) - заканчивается ли строка образцом ?
          строка.find(образец) - поиск первого вхождения образца в строке
          строка.rfind(образец) - поиск последнего вхождения образца
          строка.count(образец) - сколько раз встречается образец в строке
          строка.isalnum() - являются ли все символы строки цифрами ?
          строка.strip('.') - удаление . с обоих концов
          строка.capitalize() - Первое слово с большой буквы
          строка.title() - Все слова с большой буквы
          строка.upper() - Все символы в верхний регистр
          строка.lower() - Все символы в нижний регистр
          строка.swapcase() - Сменить регистр букв
          строка.center(30) - Отцентрировать строку на 30 пробелов
          строка.ljust(30) - Сдвинуть строку на 30 символов влево
          строка.rjust(30) - Сдвинуть строку на 30 символов вправо
          строка.replace('duck','marmoset') - Заменяем подстроку duck в строке на marmoset
          строка.replace('duck','marmoset',100) - тоже, но только 100 раз





    Преобразование к строке

        str(96.5)  - '96.5'
        str(1.0e4) - '10000.0'



Списки

  Упорядоченный набор элементов разного типа. Обозначается []

    Пустой список можно объявить как :

      empty_list = []

      или

      empty_list = list()

    Не пустой список :

      elements = [10, 'a' , "bbb" , [1,2,3] , 5]

    Преобразовать что-то в спискок :

      list('cat') -> ['c','a','t']

  Изменение элемента списка происходит по его индексу

  Добавление элементов :

      Добавление в конец списка:

          elements.append(23)

      Вставка по индексу. Элементы справа сдвигаются на одну позицию :

          elements.insert(0,'bbb')

  Длина списка:

      Узнать длину списка можно с помощью функции len():

          len(elements)

  Удаление элементов :

      Удаление по индексу:

          del elements[0]

      Удаление последнего элемента методом pop, что позволяет работать
      с удаляемым значением:

          elem = elements.pop()

      Удаление элемента из определенной позиции

          elem = elements.pop(1)

      Удаление элементов по значению. Удаляется только первое найденное вхождение:

          elements.remove('bbb')

  Получение элементов списка:

      elements[0] - по смещению
      

  Объединить два списка можно с помощью метода extend

      marxes = ['Gro','Chico']
      others = ['Gummo','Whacho']
      marxes.extend(others) -> ['Gro','Chico','Gummo','Whacho']

      или

      marxes += others

  Чтобы узнать индекс элемента по его значению, нужно использовать index

      marxes.index('Chico')

  Чтобы проверить есть ли элемент в списке, можно использовать метод in

      marxes = ['Gro','Chico','Gummo','Whacho']
      'Gro' in marxes  -> True

  Посчитать количество определенных элементов в списке, можно с помощью
  count

      marxes =  ['Gro','Chico','Gro', 'Gummo','Whacho']
      marxes.count('Gro') -> 2


  Упорядочивание списков :

      Метод sort() упорядочивает по алфавиту !!! изменяя список:

          elements.sort()

      В обратном порядке:

          elements.sort(reverse=True)

      Метод sorted() упорядочивает по алфавиту, но не изменяя список:

          sorted_elements = sorted(elements)

      Метод reverse() разворачивает список !!! изменяя список:

          elements.reverse()


  Функции для работы со списками:

      Функция reversed возвращает копию перевернутого списка ( итератора )

        tuple(reversed((1,2,3)))
        (3,2,1)

        Это же можно сделать как elements[::-1] (но затратна по памяти)

  Копирования списка :

    Скопировать список можно 3 способами :

      a = [1,2,3]
      b = a.copy()
      c = list(a)
      d = a[:]


Словари

  Неупорядоченный список с ключами. Создание словаря :

    dict = {}

  Словари можно создавать из последовательностей :

    lol = [[1,a],[2,b],[3,c]]
    dict(lol)
    -> {'1': a', '3':'c', '2':'b'}

  Чтобы добавить значение нужно указать его ключ:

    dict['4'] = 'new'

  Чтобы изменить значение по ключу, нужно указать его ключ и новое
  значение:

    dict['4'] = 'old'

  Объединение словарей с помощью update :

    dict_one = {1 : 'a', 2 : 'b' , 3 : 'c' }
    dict_two = {4 : 'd', 5 : 'z' , 6 : 'r' }
    dict_one.update(dict_two)
    -> {1 : 'a', 2 : 'b' , 3 : 'c',4 : 'd', 5 : 'z' , 6 : 'r'  }
    Если ключи в первом словаре уже есть, то их значение будет переписано из второго

  Удаление элемента :

    del dict_one[1]

  Очистка всего словаря :

    dict_one.clear()


  Чтобы проверить наличие ключа в словаре, можно использовать in

    2 in dict_one

  Получение значения из словаря

    dict_one['key']

    Но если ключа нет, то будет исключение. Для получения значения можно использовать
    get

    dict_one.get('key')

    Если ключа нет, то вернется None

  Получение всех ключей :

    dict_one.keys()

    Чтобы преобразовать полученное значение в список - list(dict_one.keys())

  Получить все значения :

    list(dict_one.values())

  Получение пар ключ-значение:

    list(dict.items())




Кортежи

  Неизменяемый тип данных. Создать кортеж можно с помощью :
    
    empty_tuple = ()

  Создать кортеж с одним элементом можно так :

    one_tuple = 'Tuple',

  Можно использовать распаковку кортежа :

    tuple = (1,2,3)
    a,b,c = tuple
    -> a=1,b=2,c=3

  Функция tuple может преобразовать другие типы списков в кортеж


Множества 

  Множества похожи на словари только без значений. Создание множества:

    empty_set = set()
    set_with = {0,1,2,3,4,5,6}

  Преобразовать другие типы во множества можно с помощью set()

    set('letters')
    {'l','e','t','r','s'}

  Комбинации множеств :

    a = {1,2}
    b = {2,3}

    & ( Пересечение множеств ) или метод intersection() - возвращает сожержащее элементы, которые находятся 
    в сравниваемых списках
        a & b -> {2}
        a.intersection(b)

    | ( Объединение) или метод union() - Возвращает объединенное множество без повторений

        a | b -> {1,2,3}
        a.union(b)

    - ( Разность ) или метод difference()

        a - b -> {1}
        a.difference(b)

    ^ ( Исключающее ИЛИ ) оставляет элементы первого и второго множества, но не общие

        a ^ b  -> {1,3}
        a.symmetric_difference(b)

    <= ( Подмножество ) или issubset() является ли множество подмножеством другого

        a <= b -> False
        a.issubset(b)

    < (собственное подмножество) - проверка содержит ли второе множество все члены первого
    и несколько других

        a < b -> False
        a < a -> False

    >= (множество множеств) или issuperset() противоположно подмножеству все члены второго
    множества являются также членами первого

        a >= b  -> False
        a.issuperset(b) -> False

    > (собственное множество множеств) первое множество содержит все члены второго и несколько
     других

        a > b -> False



Файлы

Прочие базовые типы
Типы структурных элементов программ

                                Циклы

Прерываение выполнения происходит через break

Переход на следующую итерацию - continue

Цикл for

  Цикл перебора в множестве:

      elements = [1,2,3,4,5,6,7,8,9]
      for elem in elements:
          print(elem)

Цикл while:

      while условие:
        ......

    Удаление всех вхождений в список через while:

          pets = ['dog','cat','dog','horse','elephant','cat']

          while 'cat' in pets:
              pets.remove('cat')

Проверить завершился ли цикл с помощью break или нормально можно
  используя ветку else вместе с while или for

      while position < 10:
        print(position)
        if position==7:
          break
      else:
        print('Not break')




                                        Списки

Создание списка

  Функция range(начало,смещение,шаг) создает числовую последовательность:

      range(1,5) #создает последовательность 1,2,3,4


Создание числового списка

  Чтобы создать числовой список с помощью range(), можно воспользоваться функцией list()

      list(range(1,5)) # [1,2,3,4]

Генератор списка

      squares = [value**2 for value in range(1,11)]


Срезы

  Чтобы создать срез списка, необходимо задать индексы первого и последнего элемента

      elements[0:3]

  Срезы можно сохранять в переменных, с помощью типа slice

      person = ("George", "Carlin", "May", 12, 1937)
      NAME, BIRTHDAY = slice(2), slice(2,None) # None заменяет :
      person[NAME] # ('Gearge',"Carling")
      person[BIRTHDAY] # ("May", 12, 1937)

Копирование списка

  Скопировать список можно с помощью среза

      new_elements = elements[:]

  Если применить просто равенство, то создастся ссылка на старый список

  Проверить входит ли значение в список можно с помощью выражения in :

      'mushrooms' in request

Проверить отсутствие значения в списке можно с помощью выражения not in :

      'mushrooms' not in request




                                              Кортежи

Кортеж - неизменяемый список элементов.

    Определение кортежа:

        dimensions = (200,30)
        dimensions[0]         # 200

    Перебор значений в кортеже:

        for dimension in dementions:
            print(dimension)

Значение в кортеже изменить нельзя, но можно присвоить переменной другой кортеж:

        dimensions = (200,30)
        dimentions = (150,20)

Одноэлементный кортеж

        (2, )
        a = (2,3,4)
        (2, ) + a   -> (2,2,3,4)


                                Операторы выбора

Оператор if:

    if условие:
      .....
    else:
      .....

или

     if условие:
       ......
     elif условие:
       ......
     else:
       ......



                                Словари

Словари - это множества, состоящие из пары ключ-значение

    alien = {'color':'green', 'points': 10}

Получить значение можно по ключу

    alien['color']  # green

    Если ключа нет, то вылелит исключение. Чтобы этого не было,
    можно использовать функцию get

    list.get('color','red') # второй параметр если нет ключа

    Но можно присвоить значение по умолчанию если такого ключа нет 

    list.setdefault('color', 'red')

    Задать значение по умолчанию для новых элементов можно через
    функцию defaultdict, а так же отсутствующим значениям

    from collections import defaultdict
    periodic_table = defaultdict(int)

    Так же можно задать функцию, которая будет возвращать значение
    по-умолчанию

    def no_idea():
        return 'Huh?'

    bestiary = defaultdict(no_idea)


Добавить пару можно :

    alien['screem'] = 'eeeeeeeep'

Создание пустого словаря

    alien = {}

Изменение значения :

    alien['color'] = 'red'

Удаление пары :

    del alien['color']

Перебор словаря

    Перебор пар ключ-значение:

        for key,value in user.items():
          ......

    Перебор всех ключей:

        for key in user.keys():
          .....

        Так как по умолчанию словарь выдает список ключей, то это же
        можно написать как :

        for key in user:
          .....

    Для получения упорядоченного списка ключей можно использовать sorted():

        for name in sorted(languages.keys()):
          ......

   Перебор всех значений в словаре :

        for name in names.values():
          ......

   Перебор всех значений без повторений :

        for name in set(names.values()):


                                      Коллекции

defaultdict

  Задать значение по умолчанию для новых элементов можно через
      функцию defaultdict, а так же отсутствующим значениям

      from collections import defaultdict
      periodic_table = defaultdict(int)

      Так же можно задать функцию, которая будет возвращать значение
      по-умолчанию

      def no_idea():
          return 'Huh?'

      bestiary = defaultdict(no_idea)
            ......


Counter

  С помощью этого объекта можно считать элементы в словарях

  >>> from collections import Counter
  >>> breakfast = ['spam', 'spam', 'eggs', 'spam']
  >>> breakfast_counter = Counter(breakfast)
  >>> breakfast_counter
  Counter({'spam': 3, 'eggs': 1})


  Функция most_common() возвращает все элементы в убывающем порядке или
  лишь те элементы, количество которых больше, чем заданный аргумент count :

    >>> breakfast_counter.most_common()
  [('spam', 3), ('eggs', 1)]
  >>> breakfast_counter.most_common(1)
  [('spam', 3)]

  Счетчики можно вычитать, складывать, использовать пересечения и т.д


OrderedDict

  Словарь OrderedDict() запоминает порядок, в котором добавлялись ключи, и возвращает
  их в том же порядке с помощью итератора. Попробуем создать OrderedDict
  из последовательности кортежей вида «ключ — значение»:
  >>> from collections import OrderedDict
  >>> quotes = OrderedDict([
  ...
  ('Moe', 'A wise guy, huh?'),
  ...
  ('Larry', 'Ow!'),
  ...
  ('Curly', 'Nyuk nyuk!'),
  ...
  ])
  >>>
  >>> for stooge in quotes:
  ...
  print(stooge)
  ...
  Moe
  Larry
  Curly


deque


  deque (произносится как «дэк») — это двухсторонняя очередь, которая имеет возможности
  стека и очереди. Она полезна, когда вы хотите добавить и удалить элементы с любого
  конца последовательности. В следующем примере мы будем двигаться с обоих концов слова к
  его середине, чтобы увидеть, является ли оно палиндромом. Функция popleft() удаляет крайний 
  слева элемент deque и возвращает его, функция pop() удаляет крайний справа элемент и возвращает
  его. Вместе они двигаются с концов слова к его середине. Работа будет продолжаться до тех
  пор, пока крайние символы совпадают и пока не будет достигнута середина:

  def palindrome(word):
      from collections import deque
      dq = deque(word)
      while len(dq) > 1:
        if dq.popleft() != dq.pop():
            return False
      return True


  >>> palindrome('racecar')
  True



itertools

  itertools содержит особые функции итератора. Каждая из них возвращает один элемент при каждом
  вызове из цикла for ... in и запоминает свое состояние между вызовами.

      Функция chain() проходит по своим аргументам, как если бы они были единым
      итерабельным объектом:
      >>> import itertools
      >>> for item in itertools.chain([1, 2], ['a', 'b']):
      ...
      print(item)
      ...
      1
      2
      a
      b


      Функция cycle() является бесконечным итератором, проходящим в цикле по
      своим аргументам:
      >>> import itertools
      >>> for item in itertools.cycle([1, 2]):
      ...
      print(item)
      ...
      1
      2
      1
      2


      Функция accumulate() подсчитывает накопленные значения. По умолчанию она
      высчитывает сумму:
      >>> import itertools
      >>> for item in itertools.accumulate([1, 2, 3, 4]):
      ...
      print(item)
      ...
      1
      3
      6
      10

      В качестве второго аргумента функции accumulate() вы можете передать функ-
      цию, и она будет использована вместо сложения.




pprint


  функция pprint() пытается выровнять элементы для лучшей читаемости



Именованный кортеж

  Именованный кортеж — это подкласс кортежей, с помощью которых вы можете получить доступ
  к значениям по имени (с помощью конструкции .name ) и позиции (с помощью
  конструкции [offset] ).


      >>> from collections import namedtuple
      >>> Duck = namedtuple('Duck', 'bill tail')
      >>> duck = Duck('wide orange', 'long')
      >>> duck
      Duck(bill='wide orange', tail='long')
      >>> duck.bill
      'wide orange'
      >>> duck.tail
      'long'

  Именованный кортеж можно сделать также на основе словаря:

      >>> parts = {'bill': 'wide orange', 'tail': 'long'}
      >>> duck2 = Duck(**parts)
      >>> duck2
      Duck(bill='wide orange', tail='long') 

  Именованные кортежи неизменяемы, но вы можете заменить одно или несколько полей
  и вернуть другой именованный кортеж:

      >>> duck3 = duck2._replace(tail='magnificent', bill='crushing')
      >>> duck3
      Duck(bill='crushing', tail='magnificent')

  




                                      Ввод

Ввод от пользователя можно получиться с помощью функции input(подсказка)

        message = input("Tell me your name")


                              Распаковка и Присваивание

Распаковать и присвоить списочный тип можно так :

      seen = set()
      (acc, seen) = ([], set())
      x, y, z = [1,2,3]
      x, y, z = {1,2,3}     #set is unordered
      x, y, z = "xyz"
      rectangle = (0,0), (4,4)
      (x1, y1), (x2, y2) = rectangle

В версии 3.0 появилась дополнительная версия распаковки:

      first, *rest = range(1,5)  # first=1,rest = [2,3,4]
      first, *rest, last = range(1,5) # first=1,rest=[2,3],last=4
      даже
      *_, (first, *rest) = [range(1,5)] * 5    # first=1

                                      Функции

Определение функции:

      def название_функции(параметр_a, параметр_b):
          .....

      Параметры функции могут быть позиционнными

        def function('ass',10):

      или именованными

        def function(a='ass',b=10):

      Если функция имеет фиксированную арность, то именованные аргументы можно
      передавать без имени:
          def flatten(xs, depth=None):
            pass

          flatten([1,[2],3],1)


      Значения по умолчанию :

        def function(name,age=18):

      Запрет изменения списка как параметра, путем копирования списка

        def function(names[:]):

      Передача произвольного набора параметров. В toppings будет кортеж с
      параметрами (упаковка аргументов)

        def function(*toppings):

      При этом распаковка аргументов при этом они подставляются в функцию
      симметрично:

        function(*(1,2,3,4)
        function(*[3,22,3,34])

      Если используются позиционные параметры и набор произвольных аргументов,
      то произвольные аргументы должны стоять в конце

        def function(name,*toppings)

      Так же в функцию может передоваться неизвестное количество пар ключ-значение
      , которые упакованы в словарь

        def function(name,lastname,**user_info)
        function('albert','Woo',
              location='princeton',
              field='physics'
                )


Если в функцию передать изменяемое значение и проделать с ним какие-то действия
, то значение изменится ( передается по ссылке). Чтобы, например передать в
функцию set и не изменять его, можно сделать :

        def unique(iterable, seen=None):
          seen = set(seen or [])          # копируется значение seen или []
          ......

В функции может содержаться документация. Её можно поместить сразу после определения
функции:

  def echo(any):
    "Эта функция выводит any"

  или

  def echo(any):
    '''Эта функция выводит any'''

Так как функция это объект первого порядка, то её можно передавать в другую функция

  def echoes():
    print 'echo'

  def do_something(fun):
    fun()

  do_something(echoes) -> echo

  при этом можно передавать параметры :


  def echoes(var):
    print var

  def do_something(fun,var):
    fun(var)

  do_something(echoes,'aaa') -> aaa


Можно определять функции внутри другой функции

  dev outer(a,b):
    
    def inner(c,d):
      return c+d

    return inner(a,b)




                                      Замыкания

В python это функция, которая динамически генерируется другой функцией, и они обе могут из-
меняться и запоминать значения переменных, которые были созданы вне функции.


def knights2(saying):
  
  def inner2():
    return "We are the knights who say: '%s'" % saying
  
  return inner2

a = knights('Duck')
b = knights('Hasenpfeffer')


a() -> We are the knights who say: 'Duck'"
b() -> We are the knights who say: 'Hasenpfeffer'"



                                      Лябды

В Python лямбда-функция — это анонимная функция, выраженная одним выраже-
нием.


lambda word: word.capitalize() + '!'


                                      Генераторы (yield)

В Python генератор — это объект, который предназначен для создания последова-
тельностей. Каждый раз, когда вы итерируете через генератор, он отслеживает, где он находился
во время последнего вызова, и возвращает следующее значение.

# Значение возвращается с помощью yield а не return

def my_range(first=0, last=10, step=1):
  number = first
  while number < last:
    yield number
    number += step



                                      Декораторы

Декоратор — это функция, которая принимает одну функцию в качестве аргу-
мента и возвращает другую функцию.

def document_it(func):

  def new_function(*args, **kwargs):
    print('Running function:', func.__name__)
    print('Positional arguments:', args)
    print('Keyword arguments:', kwargs)
    result = func(*args, **kwargs)
    print('Result:', result)
  return result

return new_function


Независимо от того, какую функцию func вы передадите document_it() , вы получите 
новую функцию, которая содержит дополнительные выражения, добавля­емые document_it() .
Декоратор не обязательно должен запускать код функции func , но функция document_it()
вызовет часть func , поэтому вы получите результат работы функции func ,
 а также дополнительные данные:

def add_ints(a, b):
  return a + b


# Вызов декоратора вручную :

  >cooler_add_ints = document_it(add_ints)
  >cooler_add_ints(3, 5)
      Running function: add_ints
      Positional arguments: (3, 5)
      Keyword arguments: {}
      Result: 8
      8

# Или 

@document_it
  def add_ints(a, b):
    return a + b

>>> add_ints(3, 5)
    Start function add_ints
    Positional arguments: (3, 5)
    Keyword arguments: {}
    Result: 8
    8

Каждая функция может иметь более одного декоратора.Декоратор, размещенный ближе
всего к функции (прямо над def ), будет выполнен первым, а  затем  — тот,
что находится сразу над ним.


                                    Пространства имен

Программы в Python могут иметь разные пространства имен — разделы, внутри которых
определенное имя уникально и не связано с такими же именами в других пространствах имен.

Каждая функция определяет собственное пространство имен. Если вы определите переменную,
которая называется х в основной программе, и другую переменную х в отдельной функции, они
будут ссылаться на разные значения.

В основной программе определяется глобальное пространство имен, поэтому переменные, находящиеся
в этом пространстве имен, являются глобальными.

Получить значение глобальной переменной можно, но изменить его нельзя.

Чтобы получить доступ к глобальной переменной вместо локальной переменной внутри функции, 
нужно явно использовать ключевое слово global


>>> animal = 'fruitbat'
>>> def change_and_print_global():
      global animal
      animal = 'wombat'
      print('inside change_and_print_global:', animal)


Если не использовать ключевое слово global внутри функции, Python задействует локальное пространство
имен и переменная будет локальной. Она пропадет после того, как функция завершит работу.

Python предоставляет две функции для доступа к  содержимому ваших про-
странств имен:

- locals()  — возвращает словарь, содержащий имена локального пространства имен;
- globals()  — возвращает словарь, содержащий имена глобального пространства имен.




                                      Обработка исключений

Чтобы обрабатывать исключения, код необходимо поместить в блок try except

try:
  ....
except:
  ....

Отсутствие аргументов блоке except говорит о том, что ловятся все исключения.
Можно задавать любое количество типов исключений. Так же можно передавать сам
объект исключения:
  
  except тип_исключения as имя

  try:

      position = int(value)
      print(short_list[position])

  except IndexError as err:

      print('Bad index:', position)

  except Exception as other:

      print('Something else broke:', other)

Можно так же создавать свои типы исключений :

  class UppercaseException(Exception):
      pass

  ....
  ....

  raise UppercaseException(word)


                                    Аргументы командной строки 

Аргументы командной строки можно получить с помощью функции argv в модуле sys


import sys
print ('Arguments ', sys.argv)


                                      Модули

Модуль, это отдельный файл с расширением py , в котором хранятся функции.
Импорт из модуля выглядит так :

      import модуль
      модуль.имя_функции()

  Импортирование конкретных функций из модуля

      from имя_модуля import имя_функции

  Можно импортировать несколько функций

      from имя_модуля import функция0, функция1, функция2

  Если импортировать конкретные функции, то указывать имя модуля перед
  вызовом функции не обязательно

  Назначение псевдонима для импортированной функции

      from pizza import make_pizza as mp

      from имя_модуля import функция as псевдоним

  Назначения псевдонима для модуля

      import имя_модуля as псевдоним

  Импортирование всх функций модуля

      from имя_модуля import *


                                      Пакеты

Весь код можно разположить в виде пакетов. Пакеты как и в Java это папки, но тут 
для указания того,что это пакет в папке хранят файл __init__.py .В нем так же
можно указать какие-то переменные инициализации пакета или функции




                        Функциональное программирование

Лямбды

    lambda arguments: expression

    эквивалент

    def <lambda> (arguments):
      return expression
Map

    Применяет функцию к каждому элементу последовательности

    list(map(identity, range(4))) #Чтобы увидеть результат, надо привести к list
                                  #или set или dict

    Пример использования:

    set(map(lambda x: x % 7, [1,2,5,3,4]))

    Применяет к последовательнастям, количество эелементов в результате определяется
    длиной наименьшей из последовательностей

    list(map(lambda x,n: x ** n, [2,3], range(1,8))) -> [2,9]

Filter

    Убирает из последовательности элементы, не удовлетворяющие предикату

      list(filter(lambda x: x % 2 != 0, range(10))) # [1,3,5,7,9]

    Вместо предиката можно передать None, и останутся только truthy значения

      list(filter(None, [0,None,{},set(),42])) #-> [42]

Zip

    Сшивает вместе элементы нескольких последовательностей

      list(zip("abc",range(3), [42,43,42]))) #[('a',0,42),(b,1,43),(c,2,42)]

    Как и в map, длина должна урезаться до самой короткой последовательнсоти


Генераторы списков

    [x ** 2 for x in range(10) if x % 2 == 1] #[1,9,25,49,81]

Генераторы сета

    { x % 7 for x in [1,9,16,-1,2,5]} # {1,2,5,6}

Генераторы словарей

    {x: x ** 2 for x in range(4)} # {0: 0, 1: 2, 2: 4}

Генератор списка кортежей

    [(col,row) for clo in cols for row in rows]




                                          Классы

Класс создается с помощью ключевого слова class . Имя класса должно начинаться
с большой буквы

    class Dog():
      ....

    В Python 2.7

    class Dog(object):

Конструктор класса:

    def __init__(self,параметр,параметр):
      .....

Создание экземпляра класса:

    my_dog = Dog('willy',10)

Изменение значений атрибутов:

    Напрямую:

      my_car.odometr = 200

    С помощью метода:

      my_car.update_odometr(200)


Наследование

     наследуемся от класса Car и инициализируем его с помощью вызова
     родительского конструктора. Класс может наследоваться от множества класов

     class ElectricCar(Car):
        def __init__(self,make,model):
          super().__init__(make,model)

    В 2.7 функция super() должна получать два аргумента: ссылку на класс-потомок
    и объект self. А сам родитель должен быть объявлен с параметром object

Переопределение методов родительского класса

    Для переопределения метода суперкласса, в потомке необходимо определить
    метод с тем же именем что и у метода суперкласса

В качестве оттрибутов класса могут выступать другие классы ( композиция)


Добавление методов

  В классе потомке можно добавить метод, которого не было в родительском классе

Вызов методов родителя

  Чтобы вызвать метод родителя, используется слово super:

      super().__init__(name)

Геттеры и сеттеры

  В питоне геттеры и сеттеры реализуются через свойства.

    >>> class Duck():
          def __init__(self, input_name):
              self.hidden_name = input_name

          def get_name(self):
              print('inside the getter')
              return self.hidden_name
          def set_name(self, input_name):
              print('inside the setter')
              self.hidden_name = input_name

          name = property(get_name, set_name)


  Так же их можно определить через декораторы

    @property , который размещается перед геттером;
    @name.setter , который размещается перед сеттером.

      class Duck():

          def __init__(self, input_name):
              self.hidden_name = input_name

          @property
          def name(self):
              print('inside the getter')
              return self.hidden_name

          @name.setter
          def name(self, input_name):
              print('inside the setter')
              self.hidden_name = input_name

    В этом случае доступ осуществляется как duck.name, а 
    методы не видны с наружи


  Свойство также может быть вычисляемым и определиться через @property

          @property
              def diameter(self):
                  return 2 * self.radius


Скрытие внутренних имен

    Python предлагает соглашения по именованию для атрибутов, которые не должны быть
    видимы за пределами определения их классов: имена начинаются с двух нижних 
    подчеркиваний (__).

    Но получить доступ к нему можно :

      fowl._Duck__name



Методы класса

  Внутри определения класса декоратор @classmethod показывает, что следующая функция является
  методом класса. Первым параметром метода также является сам класс. Согласно традиции этот
  параметр называется cls , поскольку слово class является зарезервированным и не может быть
  использовано здесь.


Статический метод

  Это статический метод, перед которым располагается декоратор @staticmethod , не имеющий в
  качестве начального параметра ни  self , ни класс class .



Специальные методы

  __eq__  реализует сравнение объектов (==)
  __ne__(self, other)     self != other
  __lt__(self, other) self < other
  __gt__(self, other) self > other
  __le__(self, other) self <= other
  __ge__(self, other) self >= other


  __add__(self, other) self + other
  __sub__(self, other) self — other
  __mul__(self, other) self * other
  __floordiv__(self, other) self // other
  __truediv__(self, other) self / other
  __mod__(self, other) self % other
  __pow__(self, other) self ** other


  __str__(self) str(self)
  __repr__(self) repr(self)
  __len__(self) len(self)



  






                              Модули

Каждый класс можно хранить в отдельном файле-модулею Ипортировать такой класс
можно с помощью

    from имя_модуля import имя_класса

В модуле можно хранить несколько классов.Чтобы импортировать несколько классов,
можно сделать :

    from имя_модуля import имя_класса,имя_класса2.....

Можно импортировать весь класс и обращаться к его членам через точку

    import car

Импортировать все классы из модуля можно с помощью

    from имя_модуля import *



                              Файлы

Вариант открытия файла с автоматическим закрытием:

    with open(имя_файла) as переменная_указатель:
      content = переменная_указатель.read()

    чтение по сторкам можно выполнить с помощью for:

      for line in переменная_указатель:
          ......

    сохранение содержимого в списке по строкам

      with open(filename) as file_object:
        lines = file_object.readlines()



Закрыть файл можно и в ручную с помощью close()
